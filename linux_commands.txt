# TERMINAL

0 - stdin  -> standard in -> user input
1 - stdout -> standard out -> command output, default to terminal
2 - stderr -> standard error -> error, standard error is redirected by default to terminal

Streams can be redirected using 'n>' operator, where 'n' is file descriptor number.
When n is ommited, it defaults to 1.

    $ command >  file --> redirect the command output (stdout) to the file
    $ command 1> file --> redirect the command output (stdout) to the file
    $ command 2> file --> redirect the standard error (stderr) to the file

    $ command 2> error.txt 1> output.txt --> redirect the standard error (stderr) to the error.txt and command output (stdout) to the output.txt
    $ command 2> /dev/null --> suppress the error (or stdout) messages from being displayed on the screen, redirect stderr to /dev/null (virtual trash)

    $ command > file 2>&1 --> redirect stderr to stdout and have error messages sent to the same file as standard output
                            # The order of redirection is important. For example, the following example redirects only stdout to file. 
                            # $ command 2>&1 > file 
                            # This happens because the stderr is redirected to stdout before the stdout was redirected to file.
    $ command &> file     --> another way to redirect stderr to stdout is to use the &> construct. In Bash &> has the same meaning as 2>&1


set --help
set +[flag] -> disable changes 

set -C -> Preventing overwriting files. That means that redirecting to a file does not erase the current data in that file. Not recommended.
set -f -> Disable automatic file name generation, more commonly known as "globbing."
set -e -> Stops a script immediately when something goes wrong.
set -x -> Enables to see which command in script is being executed followed by the result. More accurately debug.


-- SPECIAL VARIABLES

$0     -> return current shell with path eg. echo $0
$SHELL -> return current shell with path eg. echo "$SHELL"


-- SPECIAL CHARACTERS

.   -> current directory
..  -> parent directory
~   -> home directory
/   -> path directory separator
#   -> comment or trim strings | eg. this_string="Hello World."; echo "How-To ${this_string#Hello}" --> How-To World.
?   -> single character wildcard | eg. ls server?.log -> where ? is server id, ls ?????.txt
*   -> character sequence wildcard | eg. ls server*
_   -> space
[]  -> character set wildcard | eg. ls server[0-9].log
;   -> shell command separator
&   -> backgroud process | eg. gedit command_address.page &
<   -> input redirection | eg. sort < words.txt
>   -> output redirection | eg. ls > files.txt
|   -> pipe | eg. cat words.txt | grep [cC] | sort -r
!   -> pipeline logical NOT and history operator | eg. [ ! -d ./backup ] && mkdir ./backup | !24 -> re-run 24th command from history | !! -> re-run previous command
$   -> variable expressions | eg. echo $PATH
{}  -> code block
'   -> stops the function of all the special characters
"   -> prevents Bash from acting on most of the special characters, exception, is the dollar sign ($)
        , using  backslash \ prevents the following character from functioning as a special character; 
        this is called “escaping” the character | eg. echo "Today is \$(date)" -> will print Today is \$(date)
`   -> command replacement


-- COMMANDS

ls      -> list directory contents
            eg. ls *, ls /mnt/c/Users
pwd     -> print name of current/working directory
more    -> filter for paging through text one screenful at a time
            eg more file.txt, ls -al | more
less    -> opposite of more, does not have to read the entire input file before starting
            eg. less file.txt, ls -al | less
touch   -> change file timestamps, if file dont't exists touch will create it
            eg. touch file.txt
mv      -> move (rename) files, option -b makes a backup of each existing destination file
            eg. mv file.txt new_file.txt -> rename file, mv file.txt ../file.txt -> move file
cp      -> copy files and directories, option -b makes a backup of each existing destination file
            eg. cp file.txt ../file.txt -> copy file
rm      -> remove files or directories, using rm -rf is NOT recommended
            eg. rm -f dir/*.txt -> removes files .txt from dir directory
cd      -> change directory
            eg. cd /home
mkdir   -> make directories
            eg. mkdir /home/SuperUser/new_directory
rmdit   -> remove empty directories
            eg. rmdir /home/SuperUser/new_directory
who     -> show who is logged on
users   -> print the user names of users currently logged in to the current host
whoami  -> print user name associated with the current effective user ID
w       -> displays information about the users currently on the machine, and their processes
clear   -> clear the terminal screen
logout  -> write utmp and wtmp entries
exit    -> cause normal process termination (default 0)
            eq. exit 1 -> terminate process with signal 1
diff    -> compare files line by line
            diff file1.txt file2.txt
find    -> search for files in a directory hierarchy
            eg. find /home -name plik.txt
locate  -> search for files using indexes, may not find newly created files / directories
            eg. locate plik.txt
sort    -> sort lines of text files
            eg. sort file.txt
head    -> output the first part of files (default - 10 lines)
            eg. head file.txt
tail    -> output the last part of files (default - 10 lines)
            eg. tail -f file.txt -n 50
tr      -> translate, squeeze, and/or delete characters from standard input, writing to standard output
            eg. tr a-z A-Z -> change lowercase to uppercase
grep    -> searches for patterns in each file
            eg. grep cat plik.txt
file    -> determine file type
            eg. file plik.txt
ln      -> make links between files
            eg. ln -s /home/user1 directory_user1 -> cd /home/user1 will redirect to directory_user1
tty     -> print the file name of the terminal connected to standard input

ps      -> report a snapshot of the current processes
            eg. ps -ef | grep -v grep | grep -i root
kill    -> send a signal to a process (default signal for kill is TERM)
            eg. kill 2312

su      -> run a command with substitute user and group ID (defaults to running an interactive shell as root)
            eg. su - SuperUser
chmod   -> change file mode bits
            eg. chmod 775 plik.txt
chown   -> change file owner and group (in some distros only root can run this command)
            eg. chown SuperUser plik.txt, chown SuperUser:SuperGroup plix.txt -> changes also group
chgrp   -> change group ownership (in some distros only root can run this command)
            eg. chgrp SuperGroup plik.txt
adduser -> add a user to the system
            eg. adduser SuperUser
addgroup-> add a group to the system
            eg. addgroup SuperGroup


-- PROCESSES

ps      -> report a snapshot of the current processes
    ps -x   -> all current user processes
    ps -ef  -> all system processes

    PID     -> process ID
    TTY     -> controlling terminal
    CMD     -> running command

kill <pid>  -> terminate process
    kill -STOP <pid>    -> stops process (not terminating)
    kill -CONT <pid>    -> resume stopped process


-- DIRECTORIES

/bin        -> Essential User Binaries        --> stands for binary; contains base executables which are required for minimal system working
/boot       -> Static Boot Files              --> contains the files needed to boot the system; for example, the GRUB boot loader’s files and Linux kernels are stored here
/dev        -> Device Files                   --> contains a number of special files that represent devices; also contains pseudo-devices, which are virtual devices that don’t actually correspond to hardware
/etc        -> Configuration Files            --> contains configuration files; directory contains system-wide configuration files
/home       –> Home Folders                   --> contains a home folder for each user
/lib        –> Essential Shared Libraries     --> contains libraries needed by the essential binaries in the /bin and /sbin folder; libraries needed by the binaries in the /usr/bin folder are located in /usr/lib
/lost+found –> Recovered Files                --> if the file system crashes, a file system check will be performed at next boot; any corrupted files found will be placed in the lost+found directory, can attempt to recover as much data as possible
/media      –> Removable Media                --> contains subdirectories where removable media devices inserted into the computer are mounted
/mnt        –> Temporary Mount Points         --> /mnt directory is where system administrators mounted temporary file systems while using them
/opt        –> Optional Packages              --> contains subdirectories for optional software packages; commonly used by proprietary software that doesn’t obey the standard file system hierarchy
/proc       –> Kernel & Process Files         --> similar to the /dev directory because it doesn’t contain standard files; it contains special files that represent system and process information
/root       –> Root Home Directory            --> is the home directory of the root user; instead of being located at /home/root, it’s located at /root
/run        –> Application State Files        --> gives applications a standard place to store transient files they require like sockets and process IDs
/sbin       –> System Administration Binaries --> contains essential binaries that are generally intended to be run by the root user for system administration
/srv        –> Service Data                   --> contains "data for services provided by the system"
/tmp        –> Temporary Files                --> applications store temporary files in the /tmp directory; these files are generally deleted whenever your system is restarted and may be deleted at any time by utilities such as tmpwatch
/usr        –> User Binaries & Read-Only Data --> contains applications and files used by users, as opposed to applications and files used by the system
/var        –> Variable Data Files            --> is the writable counterpart to the /usr directory, which must be read-only in normal operation; log files and everything else that would normally be written to /usr during normal operation are written to the /var directory


-- SUDO

sudo    -> execute a command as another user (substitute user do)
visudo  -> edit the sudoers file
    Host=(user:group) cmds
    user ALL(ALL:ALL) ALL
        user        -> defines which user it applies to, here 'user'
        Host ALL    -> rule applies to all users 'user' logged in from all hosts 
        user ALL    -> the user 'user' can run the command as anyone (all)
        group ALL   -> the user 'user' can run commands as any (all) group
        cmds ALL    -> the user 'user' can run any (all) command

    vagrant ALL(ALL:ALL) NOPASSWD:ALL   -> allows to run any command without giving password

    /etc/sudoers.d/xxxx -> in this location we can create files that will be loaded automatically; files should be root:root with permissions of 0440